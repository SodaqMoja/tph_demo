
optiboot_atmega1284p.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0001fe66  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  0001fc00  0001fc00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  0001fffe  0001fffe  000002fa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000eac  00000000  00000000  000002fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000dbe  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001f66  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

0001fc00 <main>:
   1fc00:	1f 92       	push	r1
   1fc02:	cd b7       	in	r28, 0x3d	; 61
   1fc04:	de b7       	in	r29, 0x3e	; 62
   1fc06:	11 24       	eor	r1, r1
   1fc08:	84 b7       	in	r24, 0x34	; 52
   1fc0a:	14 be       	out	0x34, r1	; 52
   1fc0c:	81 ff       	sbrs	r24, 1
   1fc0e:	0f d1       	rcall	.+542    	; 0x1fe2e <appStart>
   1fc10:	85 e0       	ldi	r24, 0x05	; 5
   1fc12:	80 93 81 00 	sts	0x0081, r24
   1fc16:	82 e0       	ldi	r24, 0x02	; 2
   1fc18:	80 93 c0 00 	sts	0x00C0, r24
   1fc1c:	88 e1       	ldi	r24, 0x18	; 24
   1fc1e:	80 93 c1 00 	sts	0x00C1, r24
   1fc22:	86 e0       	ldi	r24, 0x06	; 6
   1fc24:	80 93 c2 00 	sts	0x00C2, r24
   1fc28:	80 e1       	ldi	r24, 0x10	; 16
   1fc2a:	80 93 c4 00 	sts	0x00C4, r24
   1fc2e:	8e e0       	ldi	r24, 0x0E	; 14
   1fc30:	e9 d0       	rcall	.+466    	; 0x1fe04 <watchdogConfig>
   1fc32:	20 9a       	sbi	0x04, 0	; 4
   1fc34:	26 e0       	ldi	r18, 0x06	; 6
   1fc36:	88 e1       	ldi	r24, 0x18	; 24
   1fc38:	9e ef       	ldi	r25, 0xFE	; 254
   1fc3a:	31 e0       	ldi	r19, 0x01	; 1
   1fc3c:	90 93 85 00 	sts	0x0085, r25
   1fc40:	80 93 84 00 	sts	0x0084, r24
   1fc44:	36 bb       	out	0x16, r19	; 22
   1fc46:	b0 9b       	sbis	0x16, 0	; 22
   1fc48:	fe cf       	rjmp	.-4      	; 0x1fc46 <main+0x46>
   1fc4a:	18 9a       	sbi	0x03, 0	; 3
   1fc4c:	a8 95       	wdr
   1fc4e:	21 50       	subi	r18, 0x01	; 1
   1fc50:	a9 f7       	brne	.-22     	; 0x1fc3c <main+0x3c>
   1fc52:	61 2c       	mov	r6, r1
   1fc54:	71 2c       	mov	r7, r1
   1fc56:	53 e0       	ldi	r21, 0x03	; 3
   1fc58:	d5 2e       	mov	r13, r21
   1fc5a:	cc 24       	eor	r12, r12
   1fc5c:	c3 94       	inc	r12
   1fc5e:	61 e1       	ldi	r22, 0x11	; 17
   1fc60:	b6 2e       	mov	r11, r22
   1fc62:	b7 d0       	rcall	.+366    	; 0x1fdd2 <getch>
   1fc64:	81 34       	cpi	r24, 0x41	; 65
   1fc66:	69 f4       	brne	.+26     	; 0x1fc82 <main+0x82>
   1fc68:	b4 d0       	rcall	.+360    	; 0x1fdd2 <getch>
   1fc6a:	89 83       	std	Y+1, r24	; 0x01
   1fc6c:	d1 d0       	rcall	.+418    	; 0x1fe10 <verifySpace>
   1fc6e:	89 81       	ldd	r24, Y+1	; 0x01
   1fc70:	82 38       	cpi	r24, 0x82	; 130
   1fc72:	19 f1       	breq	.+70     	; 0x1fcba <main+0xba>
   1fc74:	81 38       	cpi	r24, 0x81	; 129
   1fc76:	11 f4       	brne	.+4      	; 0x1fc7c <main+0x7c>
   1fc78:	86 e0       	ldi	r24, 0x06	; 6
   1fc7a:	01 c0       	rjmp	.+2      	; 0x1fc7e <main+0x7e>
   1fc7c:	83 e0       	ldi	r24, 0x03	; 3
   1fc7e:	a2 d0       	rcall	.+324    	; 0x1fdc4 <putch>
   1fc80:	9e c0       	rjmp	.+316    	; 0x1fdbe <main+0x1be>
   1fc82:	82 34       	cpi	r24, 0x42	; 66
   1fc84:	11 f4       	brne	.+4      	; 0x1fc8a <main+0x8a>
   1fc86:	84 e1       	ldi	r24, 0x14	; 20
   1fc88:	03 c0       	rjmp	.+6      	; 0x1fc90 <main+0x90>
   1fc8a:	85 34       	cpi	r24, 0x45	; 69
   1fc8c:	19 f4       	brne	.+6      	; 0x1fc94 <main+0x94>
   1fc8e:	85 e0       	ldi	r24, 0x05	; 5
   1fc90:	c7 d0       	rcall	.+398    	; 0x1fe20 <getNch>
   1fc92:	95 c0       	rjmp	.+298    	; 0x1fdbe <main+0x1be>
   1fc94:	85 35       	cpi	r24, 0x55	; 85
   1fc96:	69 f4       	brne	.+26     	; 0x1fcb2 <main+0xb2>
   1fc98:	9c d0       	rcall	.+312    	; 0x1fdd2 <getch>
   1fc9a:	68 2e       	mov	r6, r24
   1fc9c:	9a d0       	rcall	.+308    	; 0x1fdd2 <getch>
   1fc9e:	71 2c       	mov	r7, r1
   1fca0:	78 2a       	or	r7, r24
   1fca2:	87 2d       	mov	r24, r7
   1fca4:	88 1f       	adc	r24, r24
   1fca6:	88 27       	eor	r24, r24
   1fca8:	88 1f       	adc	r24, r24
   1fcaa:	8b bf       	out	0x3b, r24	; 59
   1fcac:	66 0c       	add	r6, r6
   1fcae:	77 1c       	adc	r7, r7
   1fcb0:	85 c0       	rjmp	.+266    	; 0x1fdbc <main+0x1bc>
   1fcb2:	86 35       	cpi	r24, 0x56	; 86
   1fcb4:	21 f4       	brne	.+8      	; 0x1fcbe <main+0xbe>
   1fcb6:	84 e0       	ldi	r24, 0x04	; 4
   1fcb8:	b3 d0       	rcall	.+358    	; 0x1fe20 <getNch>
   1fcba:	80 e0       	ldi	r24, 0x00	; 0
   1fcbc:	e0 cf       	rjmp	.-64     	; 0x1fc7e <main+0x7e>
   1fcbe:	84 36       	cpi	r24, 0x64	; 100
   1fcc0:	09 f0       	breq	.+2      	; 0x1fcc4 <main+0xc4>
   1fcc2:	4e c0       	rjmp	.+156    	; 0x1fd60 <main+0x160>
   1fcc4:	92 d0       	rcall	.+292    	; 0x1fdea <getLen>
   1fcc6:	7c 01       	movw	r14, r24
   1fcc8:	84 d0       	rcall	.+264    	; 0x1fdd2 <getch>
   1fcca:	a8 2e       	mov	r10, r24
   1fccc:	87 01       	movw	r16, r14
   1fcce:	81 2c       	mov	r8, r1
   1fcd0:	99 24       	eor	r9, r9
   1fcd2:	93 94       	inc	r9
   1fcd4:	7e d0       	rcall	.+252    	; 0x1fdd2 <getch>
   1fcd6:	f4 01       	movw	r30, r8
   1fcd8:	81 93       	st	Z+, r24
   1fcda:	4f 01       	movw	r8, r30
   1fcdc:	01 50       	subi	r16, 0x01	; 1
   1fcde:	11 09       	sbc	r17, r1
   1fce0:	01 15       	cp	r16, r1
   1fce2:	11 05       	cpc	r17, r1
   1fce4:	b9 f7       	brne	.-18     	; 0x1fcd4 <main+0xd4>
   1fce6:	94 d0       	rcall	.+296    	; 0x1fe10 <verifySpace>
   1fce8:	f5 e4       	ldi	r31, 0x45	; 69
   1fcea:	af 12       	cpse	r10, r31
   1fcec:	12 c0       	rjmp	.+36     	; 0x1fd12 <main+0x112>
   1fcee:	e6 0c       	add	r14, r6
   1fcf0:	f7 1c       	adc	r15, r7
   1fcf2:	83 01       	movw	r16, r6
   1fcf4:	81 2c       	mov	r8, r1
   1fcf6:	99 24       	eor	r9, r9
   1fcf8:	93 94       	inc	r9
   1fcfa:	0e 15       	cp	r16, r14
   1fcfc:	1f 05       	cpc	r17, r15
   1fcfe:	09 f4       	brne	.+2      	; 0x1fd02 <main+0x102>
   1fd00:	5e c0       	rjmp	.+188    	; 0x1fdbe <main+0x1be>
   1fd02:	f4 01       	movw	r30, r8
   1fd04:	61 91       	ld	r22, Z+
   1fd06:	4f 01       	movw	r8, r30
   1fd08:	c8 01       	movw	r24, r16
   1fd0a:	9f d0       	rcall	.+318    	; 0x1fe4a <__eewr_byte_m1284p>
   1fd0c:	0f 5f       	subi	r16, 0xFF	; 255
   1fd0e:	1f 4f       	sbci	r17, 0xFF	; 255
   1fd10:	f4 cf       	rjmp	.-24     	; 0x1fcfa <main+0xfa>
   1fd12:	f3 01       	movw	r30, r6
   1fd14:	d7 be       	out	0x37, r13	; 55
   1fd16:	e8 95       	spm
   1fd18:	07 b6       	in	r0, 0x37	; 55
   1fd1a:	00 fc       	sbrc	r0, 0
   1fd1c:	fd cf       	rjmp	.-6      	; 0x1fd18 <main+0x118>
   1fd1e:	a3 01       	movw	r20, r6
   1fd20:	a0 e0       	ldi	r26, 0x00	; 0
   1fd22:	b1 e0       	ldi	r27, 0x01	; 1
   1fd24:	8c 91       	ld	r24, X
   1fd26:	12 96       	adiw	r26, 0x02	; 2
   1fd28:	9d 01       	movw	r18, r26
   1fd2a:	21 50       	subi	r18, 0x01	; 1
   1fd2c:	31 09       	sbc	r19, r1
   1fd2e:	f9 01       	movw	r30, r18
   1fd30:	20 81       	ld	r18, Z
   1fd32:	90 e0       	ldi	r25, 0x00	; 0
   1fd34:	92 2b       	or	r25, r18
   1fd36:	fa 01       	movw	r30, r20
   1fd38:	0c 01       	movw	r0, r24
   1fd3a:	c7 be       	out	0x37, r12	; 55
   1fd3c:	e8 95       	spm
   1fd3e:	11 24       	eor	r1, r1
   1fd40:	4e 5f       	subi	r20, 0xFE	; 254
   1fd42:	5f 4f       	sbci	r21, 0xFF	; 255
   1fd44:	a1 15       	cp	r26, r1
   1fd46:	f2 e0       	ldi	r31, 0x02	; 2
   1fd48:	bf 07       	cpc	r27, r31
   1fd4a:	61 f7       	brne	.-40     	; 0x1fd24 <main+0x124>
   1fd4c:	85 e0       	ldi	r24, 0x05	; 5
   1fd4e:	f3 01       	movw	r30, r6
   1fd50:	87 bf       	out	0x37, r24	; 55
   1fd52:	e8 95       	spm
   1fd54:	07 b6       	in	r0, 0x37	; 55
   1fd56:	00 fc       	sbrc	r0, 0
   1fd58:	fd cf       	rjmp	.-6      	; 0x1fd54 <main+0x154>
   1fd5a:	b7 be       	out	0x37, r11	; 55
   1fd5c:	e8 95       	spm
   1fd5e:	2f c0       	rjmp	.+94     	; 0x1fdbe <main+0x1be>
   1fd60:	84 37       	cpi	r24, 0x74	; 116
   1fd62:	f9 f4       	brne	.+62     	; 0x1fda2 <main+0x1a2>
   1fd64:	42 d0       	rcall	.+132    	; 0x1fdea <getLen>
   1fd66:	8c 01       	movw	r16, r24
   1fd68:	34 d0       	rcall	.+104    	; 0x1fdd2 <getch>
   1fd6a:	89 83       	std	Y+1, r24	; 0x01
   1fd6c:	51 d0       	rcall	.+162    	; 0x1fe10 <verifySpace>
   1fd6e:	89 81       	ldd	r24, Y+1	; 0x01
   1fd70:	73 01       	movw	r14, r6
   1fd72:	85 34       	cpi	r24, 0x45	; 69
   1fd74:	61 f4       	brne	.+24     	; 0x1fd8e <main+0x18e>
   1fd76:	c7 01       	movw	r24, r14
   1fd78:	60 d0       	rcall	.+192    	; 0x1fe3a <__eerd_byte_m1284p>
   1fd7a:	24 d0       	rcall	.+72     	; 0x1fdc4 <putch>
   1fd7c:	01 50       	subi	r16, 0x01	; 1
   1fd7e:	11 09       	sbc	r17, r1
   1fd80:	ff ef       	ldi	r31, 0xFF	; 255
   1fd82:	ef 1a       	sub	r14, r31
   1fd84:	ff 0a       	sbc	r15, r31
   1fd86:	01 15       	cp	r16, r1
   1fd88:	11 05       	cpc	r17, r1
   1fd8a:	a9 f7       	brne	.-22     	; 0x1fd76 <main+0x176>
   1fd8c:	18 c0       	rjmp	.+48     	; 0x1fdbe <main+0x1be>
   1fd8e:	f7 01       	movw	r30, r14
   1fd90:	87 91       	elpm	r24, Z+
   1fd92:	7f 01       	movw	r14, r30
   1fd94:	17 d0       	rcall	.+46     	; 0x1fdc4 <putch>
   1fd96:	01 50       	subi	r16, 0x01	; 1
   1fd98:	11 09       	sbc	r17, r1
   1fd9a:	01 15       	cp	r16, r1
   1fd9c:	11 05       	cpc	r17, r1
   1fd9e:	b9 f7       	brne	.-18     	; 0x1fd8e <main+0x18e>
   1fda0:	0e c0       	rjmp	.+28     	; 0x1fdbe <main+0x1be>
   1fda2:	85 37       	cpi	r24, 0x75	; 117
   1fda4:	39 f4       	brne	.+14     	; 0x1fdb4 <main+0x1b4>
   1fda6:	34 d0       	rcall	.+104    	; 0x1fe10 <verifySpace>
   1fda8:	8e e1       	ldi	r24, 0x1E	; 30
   1fdaa:	0c d0       	rcall	.+24     	; 0x1fdc4 <putch>
   1fdac:	87 e9       	ldi	r24, 0x97	; 151
   1fdae:	0a d0       	rcall	.+20     	; 0x1fdc4 <putch>
   1fdb0:	85 e0       	ldi	r24, 0x05	; 5
   1fdb2:	65 cf       	rjmp	.-310    	; 0x1fc7e <main+0x7e>
   1fdb4:	81 35       	cpi	r24, 0x51	; 81
   1fdb6:	11 f4       	brne	.+4      	; 0x1fdbc <main+0x1bc>
   1fdb8:	88 e0       	ldi	r24, 0x08	; 8
   1fdba:	24 d0       	rcall	.+72     	; 0x1fe04 <watchdogConfig>
   1fdbc:	29 d0       	rcall	.+82     	; 0x1fe10 <verifySpace>
   1fdbe:	80 e1       	ldi	r24, 0x10	; 16
   1fdc0:	01 d0       	rcall	.+2      	; 0x1fdc4 <putch>
   1fdc2:	4f cf       	rjmp	.-354    	; 0x1fc62 <main+0x62>

0001fdc4 <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
   1fdc4:	90 91 c0 00 	lds	r25, 0x00C0
   1fdc8:	95 ff       	sbrs	r25, 5
   1fdca:	fc cf       	rjmp	.-8      	; 0x1fdc4 <putch>
  UART_UDR = ch;
   1fdcc:	80 93 c6 00 	sts	0x00C6, r24
   1fdd0:	08 95       	ret

0001fdd2 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
   1fdd2:	80 91 c0 00 	lds	r24, 0x00C0
   1fdd6:	87 ff       	sbrs	r24, 7
   1fdd8:	fc cf       	rjmp	.-8      	; 0x1fdd2 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
   1fdda:	80 91 c0 00 	lds	r24, 0x00C0
   1fdde:	84 fd       	sbrc	r24, 4
   1fde0:	01 c0       	rjmp	.+2      	; 0x1fde4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
   1fde2:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
   1fde4:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
   1fde8:	08 95       	ret

0001fdea <getLen>:

// Read 2 bytes (big-endian) length
uint16_t getLen(void) {
   1fdea:	cf 93       	push	r28
  uint8_t b1 = getch();
   1fdec:	f2 df       	rcall	.-28     	; 0x1fdd2 <getch>
   1fdee:	c8 2f       	mov	r28, r24
   1fdf0:	f0 df       	rcall	.-32     	; 0x1fdd2 <getch>
  uint8_t b0 = getch();
   1fdf2:	2c 2f       	mov	r18, r28
   1fdf4:	30 e0       	ldi	r19, 0x00	; 0
  return ((uint16_t)b1 << 8) | b0;
   1fdf6:	32 2f       	mov	r19, r18
   1fdf8:	22 27       	eor	r18, r18
   1fdfa:	a9 01       	movw	r20, r18
   1fdfc:	48 2b       	or	r20, r24
}
   1fdfe:	ca 01       	movw	r24, r20
   1fe00:	cf 91       	pop	r28
   1fe02:	08 95       	ret

0001fe04 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
   1fe04:	e0 e6       	ldi	r30, 0x60	; 96
   1fe06:	f0 e0       	ldi	r31, 0x00	; 0
   1fe08:	98 e1       	ldi	r25, 0x18	; 24
   1fe0a:	90 83       	st	Z, r25
  WDTCSR = x;
   1fe0c:	80 83       	st	Z, r24
   1fe0e:	08 95       	ret

0001fe10 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
   1fe10:	e0 df       	rcall	.-64     	; 0x1fdd2 <getch>
   1fe12:	80 32       	cpi	r24, 0x20	; 32
   1fe14:	19 f0       	breq	.+6      	; 0x1fe1c <verifySpace+0xc>
   1fe16:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
   1fe18:	f5 df       	rcall	.-22     	; 0x1fe04 <watchdogConfig>
   1fe1a:	ff cf       	rjmp	.-2      	; 0x1fe1a <verifySpace+0xa>
   1fe1c:	84 e1       	ldi	r24, 0x14	; 20
   1fe1e:	d2 cf       	rjmp	.-92     	; 0x1fdc4 <putch>

0001fe20 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
   1fe20:	cf 93       	push	r28
   1fe22:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
   1fe24:	d6 df       	rcall	.-84     	; 0x1fdd2 <getch>
   1fe26:	c1 50       	subi	r28, 0x01	; 1
   1fe28:	e9 f7       	brne	.-6      	; 0x1fe24 <getNch+0x4>
   1fe2a:	cf 91       	pop	r28
  verifySpace();
}
   1fe2c:	f1 cf       	rjmp	.-30     	; 0x1fe10 <verifySpace>

0001fe2e <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
   1fe2e:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
   1fe30:	80 e0       	ldi	r24, 0x00	; 0
   1fe32:	e8 df       	rcall	.-48     	; 0x1fe04 <watchdogConfig>
   1fe34:	ee 27       	eor	r30, r30
  __asm__ __volatile__ (
   1fe36:	ff 27       	eor	r31, r31
   1fe38:	09 94       	ijmp

0001fe3a <__eerd_byte_m1284p>:
   1fe3a:	f9 99       	sbic	0x1f, 1	; 31
   1fe3c:	fe cf       	rjmp	.-4      	; 0x1fe3a <__eerd_byte_m1284p>
   1fe3e:	92 bd       	out	0x22, r25	; 34
   1fe40:	81 bd       	out	0x21, r24	; 33
   1fe42:	f8 9a       	sbi	0x1f, 0	; 31
   1fe44:	99 27       	eor	r25, r25
   1fe46:	80 b5       	in	r24, 0x20	; 32
   1fe48:	08 95       	ret

0001fe4a <__eewr_byte_m1284p>:
   1fe4a:	26 2f       	mov	r18, r22

0001fe4c <__eewr_r18_m1284p>:
   1fe4c:	f9 99       	sbic	0x1f, 1	; 31
   1fe4e:	fe cf       	rjmp	.-4      	; 0x1fe4c <__eewr_r18_m1284p>
   1fe50:	1f ba       	out	0x1f, r1	; 31
   1fe52:	92 bd       	out	0x22, r25	; 34
   1fe54:	81 bd       	out	0x21, r24	; 33
   1fe56:	20 bd       	out	0x20, r18	; 32
   1fe58:	0f b6       	in	r0, 0x3f	; 63
   1fe5a:	f8 94       	cli
   1fe5c:	fa 9a       	sbi	0x1f, 2	; 31
   1fe5e:	f9 9a       	sbi	0x1f, 1	; 31
   1fe60:	0f be       	out	0x3f, r0	; 63
   1fe62:	01 96       	adiw	r24, 0x01	; 1
   1fe64:	08 95       	ret
