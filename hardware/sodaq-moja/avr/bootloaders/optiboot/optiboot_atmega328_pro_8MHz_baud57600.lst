
optiboot_atmega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00007ff0  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f0  00007e00  00007e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffe  00007ffe  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000c9c  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000d4e  00000000  00000000  00000f24  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00001c72  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00007e00 <main>:
    7e00:	1f 92       	push	r1
    7e02:	cd b7       	in	r28, 0x3d	; 61
    7e04:	de b7       	in	r29, 0x3e	; 62
    7e06:	11 24       	eor	r1, r1
    7e08:	84 b7       	in	r24, 0x34	; 52
    7e0a:	14 be       	out	0x34, r1	; 52
    7e0c:	81 ff       	sbrs	r24, 1
    7e0e:	ea d0       	rcall	.+468    	; 0x7fe4 <appStart>
    7e10:	85 e0       	ldi	r24, 0x05	; 5
    7e12:	80 93 81 00 	sts	0x0081, r24
    7e16:	82 e0       	ldi	r24, 0x02	; 2
    7e18:	80 93 c0 00 	sts	0x00C0, r24
    7e1c:	88 e1       	ldi	r24, 0x18	; 24
    7e1e:	80 93 c1 00 	sts	0x00C1, r24
    7e22:	86 e0       	ldi	r24, 0x06	; 6
    7e24:	80 93 c2 00 	sts	0x00C2, r24
    7e28:	80 e1       	ldi	r24, 0x10	; 16
    7e2a:	80 93 c4 00 	sts	0x00C4, r24
    7e2e:	8e e0       	ldi	r24, 0x0E	; 14
    7e30:	c4 d0       	rcall	.+392    	; 0x7fba <watchdogConfig>
    7e32:	25 9a       	sbi	0x04, 5	; 4
    7e34:	26 e0       	ldi	r18, 0x06	; 6
    7e36:	88 e1       	ldi	r24, 0x18	; 24
    7e38:	9e ef       	ldi	r25, 0xFE	; 254
    7e3a:	31 e0       	ldi	r19, 0x01	; 1
    7e3c:	90 93 85 00 	sts	0x0085, r25
    7e40:	80 93 84 00 	sts	0x0084, r24
    7e44:	36 bb       	out	0x16, r19	; 22
    7e46:	b0 9b       	sbis	0x16, 0	; 22
    7e48:	fe cf       	rjmp	.-4      	; 0x7e46 <main+0x46>
    7e4a:	1d 9a       	sbi	0x03, 5	; 3
    7e4c:	a8 95       	wdr
    7e4e:	21 50       	subi	r18, 0x01	; 1
    7e50:	a9 f7       	brne	.-22     	; 0x7e3c <main+0x3c>
    7e52:	61 2c       	mov	r6, r1
    7e54:	71 2c       	mov	r7, r1
    7e56:	43 e0       	ldi	r20, 0x03	; 3
    7e58:	d4 2e       	mov	r13, r20
    7e5a:	cc 24       	eor	r12, r12
    7e5c:	c3 94       	inc	r12
    7e5e:	55 e0       	ldi	r21, 0x05	; 5
    7e60:	b5 2e       	mov	r11, r21
    7e62:	61 e1       	ldi	r22, 0x11	; 17
    7e64:	a6 2e       	mov	r10, r22
    7e66:	90 d0       	rcall	.+288    	; 0x7f88 <getch>
    7e68:	81 34       	cpi	r24, 0x41	; 65
    7e6a:	69 f4       	brne	.+26     	; 0x7e86 <main+0x86>
    7e6c:	8d d0       	rcall	.+282    	; 0x7f88 <getch>
    7e6e:	89 83       	std	Y+1, r24	; 0x01
    7e70:	aa d0       	rcall	.+340    	; 0x7fc6 <verifySpace>
    7e72:	89 81       	ldd	r24, Y+1	; 0x01
    7e74:	82 38       	cpi	r24, 0x82	; 130
    7e76:	f1 f0       	breq	.+60     	; 0x7eb4 <main+0xb4>
    7e78:	81 38       	cpi	r24, 0x81	; 129
    7e7a:	11 f4       	brne	.+4      	; 0x7e80 <main+0x80>
    7e7c:	86 e0       	ldi	r24, 0x06	; 6
    7e7e:	01 c0       	rjmp	.+2      	; 0x7e82 <main+0x82>
    7e80:	83 e0       	ldi	r24, 0x03	; 3
    7e82:	7b d0       	rcall	.+246    	; 0x7f7a <putch>
    7e84:	77 c0       	rjmp	.+238    	; 0x7f74 <main+0x174>
    7e86:	82 34       	cpi	r24, 0x42	; 66
    7e88:	11 f4       	brne	.+4      	; 0x7e8e <main+0x8e>
    7e8a:	84 e1       	ldi	r24, 0x14	; 20
    7e8c:	03 c0       	rjmp	.+6      	; 0x7e94 <main+0x94>
    7e8e:	85 34       	cpi	r24, 0x45	; 69
    7e90:	19 f4       	brne	.+6      	; 0x7e98 <main+0x98>
    7e92:	85 e0       	ldi	r24, 0x05	; 5
    7e94:	a0 d0       	rcall	.+320    	; 0x7fd6 <getNch>
    7e96:	6e c0       	rjmp	.+220    	; 0x7f74 <main+0x174>
    7e98:	85 35       	cpi	r24, 0x55	; 85
    7e9a:	41 f4       	brne	.+16     	; 0x7eac <main+0xac>
    7e9c:	75 d0       	rcall	.+234    	; 0x7f88 <getch>
    7e9e:	68 2e       	mov	r6, r24
    7ea0:	73 d0       	rcall	.+230    	; 0x7f88 <getch>
    7ea2:	71 2c       	mov	r7, r1
    7ea4:	78 2a       	or	r7, r24
    7ea6:	66 0c       	add	r6, r6
    7ea8:	77 1c       	adc	r7, r7
    7eaa:	63 c0       	rjmp	.+198    	; 0x7f72 <main+0x172>
    7eac:	86 35       	cpi	r24, 0x56	; 86
    7eae:	21 f4       	brne	.+8      	; 0x7eb8 <main+0xb8>
    7eb0:	84 e0       	ldi	r24, 0x04	; 4
    7eb2:	91 d0       	rcall	.+290    	; 0x7fd6 <getNch>
    7eb4:	80 e0       	ldi	r24, 0x00	; 0
    7eb6:	e5 cf       	rjmp	.-54     	; 0x7e82 <main+0x82>
    7eb8:	84 36       	cpi	r24, 0x64	; 100
    7eba:	09 f0       	breq	.+2      	; 0x7ebe <main+0xbe>
    7ebc:	3b c0       	rjmp	.+118    	; 0x7f34 <main+0x134>
    7ebe:	70 d0       	rcall	.+224    	; 0x7fa0 <getLen>
    7ec0:	8c 01       	movw	r16, r24
    7ec2:	62 d0       	rcall	.+196    	; 0x7f88 <getch>
    7ec4:	98 2e       	mov	r9, r24
    7ec6:	e1 2c       	mov	r14, r1
    7ec8:	ff 24       	eor	r15, r15
    7eca:	f3 94       	inc	r15
    7ecc:	5d d0       	rcall	.+186    	; 0x7f88 <getch>
    7ece:	f7 01       	movw	r30, r14
    7ed0:	81 93       	st	Z+, r24
    7ed2:	7f 01       	movw	r14, r30
    7ed4:	01 50       	subi	r16, 0x01	; 1
    7ed6:	11 09       	sbc	r17, r1
    7ed8:	01 15       	cp	r16, r1
    7eda:	11 05       	cpc	r17, r1
    7edc:	b9 f7       	brne	.-18     	; 0x7ecc <main+0xcc>
    7ede:	73 d0       	rcall	.+230    	; 0x7fc6 <verifySpace>
    7ee0:	f5 e4       	ldi	r31, 0x45	; 69
    7ee2:	9f 12       	cpse	r9, r31
    7ee4:	01 c0       	rjmp	.+2      	; 0x7ee8 <main+0xe8>
    7ee6:	ff cf       	rjmp	.-2      	; 0x7ee6 <main+0xe6>
    7ee8:	f3 01       	movw	r30, r6
    7eea:	d7 be       	out	0x37, r13	; 55
    7eec:	e8 95       	spm
    7eee:	07 b6       	in	r0, 0x37	; 55
    7ef0:	00 fc       	sbrc	r0, 0
    7ef2:	fd cf       	rjmp	.-6      	; 0x7eee <main+0xee>
    7ef4:	a3 01       	movw	r20, r6
    7ef6:	a0 e0       	ldi	r26, 0x00	; 0
    7ef8:	b1 e0       	ldi	r27, 0x01	; 1
    7efa:	8c 91       	ld	r24, X
    7efc:	12 96       	adiw	r26, 0x02	; 2
    7efe:	9d 01       	movw	r18, r26
    7f00:	21 50       	subi	r18, 0x01	; 1
    7f02:	31 09       	sbc	r19, r1
    7f04:	f9 01       	movw	r30, r18
    7f06:	20 81       	ld	r18, Z
    7f08:	90 e0       	ldi	r25, 0x00	; 0
    7f0a:	92 2b       	or	r25, r18
    7f0c:	fa 01       	movw	r30, r20
    7f0e:	0c 01       	movw	r0, r24
    7f10:	c7 be       	out	0x37, r12	; 55
    7f12:	e8 95       	spm
    7f14:	11 24       	eor	r1, r1
    7f16:	4e 5f       	subi	r20, 0xFE	; 254
    7f18:	5f 4f       	sbci	r21, 0xFF	; 255
    7f1a:	a0 38       	cpi	r26, 0x80	; 128
    7f1c:	f1 e0       	ldi	r31, 0x01	; 1
    7f1e:	bf 07       	cpc	r27, r31
    7f20:	61 f7       	brne	.-40     	; 0x7efa <main+0xfa>
    7f22:	f3 01       	movw	r30, r6
    7f24:	b7 be       	out	0x37, r11	; 55
    7f26:	e8 95       	spm
    7f28:	07 b6       	in	r0, 0x37	; 55
    7f2a:	00 fc       	sbrc	r0, 0
    7f2c:	fd cf       	rjmp	.-6      	; 0x7f28 <main+0x128>
    7f2e:	a7 be       	out	0x37, r10	; 55
    7f30:	e8 95       	spm
    7f32:	20 c0       	rjmp	.+64     	; 0x7f74 <main+0x174>
    7f34:	84 37       	cpi	r24, 0x74	; 116
    7f36:	81 f4       	brne	.+32     	; 0x7f58 <main+0x158>
    7f38:	33 d0       	rcall	.+102    	; 0x7fa0 <getLen>
    7f3a:	7c 01       	movw	r14, r24
    7f3c:	25 d0       	rcall	.+74     	; 0x7f88 <getch>
    7f3e:	43 d0       	rcall	.+134    	; 0x7fc6 <verifySpace>
    7f40:	83 01       	movw	r16, r6
    7f42:	f8 01       	movw	r30, r16
    7f44:	85 91       	lpm	r24, Z+
    7f46:	8f 01       	movw	r16, r30
    7f48:	18 d0       	rcall	.+48     	; 0x7f7a <putch>
    7f4a:	f1 e0       	ldi	r31, 0x01	; 1
    7f4c:	ef 1a       	sub	r14, r31
    7f4e:	f1 08       	sbc	r15, r1
    7f50:	e1 14       	cp	r14, r1
    7f52:	f1 04       	cpc	r15, r1
    7f54:	b1 f7       	brne	.-20     	; 0x7f42 <main+0x142>
    7f56:	0e c0       	rjmp	.+28     	; 0x7f74 <main+0x174>
    7f58:	85 37       	cpi	r24, 0x75	; 117
    7f5a:	39 f4       	brne	.+14     	; 0x7f6a <main+0x16a>
    7f5c:	34 d0       	rcall	.+104    	; 0x7fc6 <verifySpace>
    7f5e:	8e e1       	ldi	r24, 0x1E	; 30
    7f60:	0c d0       	rcall	.+24     	; 0x7f7a <putch>
    7f62:	85 e9       	ldi	r24, 0x95	; 149
    7f64:	0a d0       	rcall	.+20     	; 0x7f7a <putch>
    7f66:	8f e0       	ldi	r24, 0x0F	; 15
    7f68:	8c cf       	rjmp	.-232    	; 0x7e82 <main+0x82>
    7f6a:	81 35       	cpi	r24, 0x51	; 81
    7f6c:	11 f4       	brne	.+4      	; 0x7f72 <main+0x172>
    7f6e:	88 e0       	ldi	r24, 0x08	; 8
    7f70:	24 d0       	rcall	.+72     	; 0x7fba <watchdogConfig>
    7f72:	29 d0       	rcall	.+82     	; 0x7fc6 <verifySpace>
    7f74:	80 e1       	ldi	r24, 0x10	; 16
    7f76:	01 d0       	rcall	.+2      	; 0x7f7a <putch>
    7f78:	76 cf       	rjmp	.-276    	; 0x7e66 <main+0x66>

00007f7a <putch>:
  }
}

void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
    7f7a:	90 91 c0 00 	lds	r25, 0x00C0
    7f7e:	95 ff       	sbrs	r25, 5
    7f80:	fc cf       	rjmp	.-8      	; 0x7f7a <putch>
  UART_UDR = ch;
    7f82:	80 93 c6 00 	sts	0x00C6, r24
    7f86:	08 95       	ret

00007f88 <getch>:
      [uartBit] "I" (UART_RX_BIT)
    :
      "r25"
);
#else
  while(!(UART_SRA & _BV(RXC0)))
    7f88:	80 91 c0 00 	lds	r24, 0x00C0
    7f8c:	87 ff       	sbrs	r24, 7
    7f8e:	fc cf       	rjmp	.-8      	; 0x7f88 <getch>
    ;
  if (!(UART_SRA & _BV(FE0))) {
    7f90:	80 91 c0 00 	lds	r24, 0x00C0
    7f94:	84 fd       	sbrc	r24, 4
    7f96:	01 c0       	rjmp	.+2      	; 0x7f9a <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    7f98:	a8 95       	wdr
       * don't care that an invalid char is returned...)
       */
    watchdogReset();
  }

  ch = UART_UDR;
    7f9a:	80 91 c6 00 	lds	r24, 0x00C6
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    7f9e:	08 95       	ret

00007fa0 <getLen>:

// Read 2 bytes (big-endian) length
uint16_t getLen(void) {
    7fa0:	cf 93       	push	r28
  uint8_t b1 = getch();
    7fa2:	f2 df       	rcall	.-28     	; 0x7f88 <getch>
    7fa4:	c8 2f       	mov	r28, r24
    7fa6:	f0 df       	rcall	.-32     	; 0x7f88 <getch>
  uint8_t b0 = getch();
    7fa8:	2c 2f       	mov	r18, r28
    7faa:	30 e0       	ldi	r19, 0x00	; 0
  return ((uint16_t)b1 << 8) | b0;
    7fac:	32 2f       	mov	r19, r18
    7fae:	22 27       	eor	r18, r18
    7fb0:	a9 01       	movw	r20, r18
    7fb2:	48 2b       	or	r20, r24
}
    7fb4:	ca 01       	movw	r24, r20
    7fb6:	cf 91       	pop	r28
    7fb8:	08 95       	ret

00007fba <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    7fba:	e0 e6       	ldi	r30, 0x60	; 96
    7fbc:	f0 e0       	ldi	r31, 0x00	; 0
    7fbe:	98 e1       	ldi	r25, 0x18	; 24
    7fc0:	90 83       	st	Z, r25
  WDTCSR = x;
    7fc2:	80 83       	st	Z, r24
    7fc4:	08 95       	ret

00007fc6 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    7fc6:	e0 df       	rcall	.-64     	; 0x7f88 <getch>
    7fc8:	80 32       	cpi	r24, 0x20	; 32
    7fca:	19 f0       	breq	.+6      	; 0x7fd2 <verifySpace+0xc>
    7fcc:	88 e0       	ldi	r24, 0x08	; 8
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fce:	f5 df       	rcall	.-22     	; 0x7fba <watchdogConfig>
    7fd0:	ff cf       	rjmp	.-2      	; 0x7fd0 <verifySpace+0xa>
    7fd2:	84 e1       	ldi	r24, 0x14	; 20
    7fd4:	d2 cf       	rjmp	.-92     	; 0x7f7a <putch>

00007fd6 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    7fd6:	cf 93       	push	r28
    7fd8:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    7fda:	d6 df       	rcall	.-84     	; 0x7f88 <getch>
    7fdc:	c1 50       	subi	r28, 0x01	; 1
    7fde:	e9 f7       	brne	.-6      	; 0x7fda <getNch+0x4>
    7fe0:	cf 91       	pop	r28
  verifySpace();
}
    7fe2:	f1 cf       	rjmp	.-30     	; 0x7fc6 <verifySpace>

00007fe4 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    7fe4:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    7fe6:	80 e0       	ldi	r24, 0x00	; 0
    7fe8:	e8 df       	rcall	.-48     	; 0x7fba <watchdogConfig>
    7fea:	ee 27       	eor	r30, r30
  __asm__ __volatile__ (
    7fec:	ff 27       	eor	r31, r31
    7fee:	09 94       	ijmp
